<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans    
    http://www.springframework.org/schema/beans/spring-beans-4.0.xsd    
    http://www.springframework.org/schema/tx    
    http://www.springframework.org/schema/tx/spring-tx-4.0.xsd   
    http://www.springframework.org/schema/context   
    http://www.springframework.org/schema/context/spring-context-4.0.xsd 
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">

	<!-- 数据库和事务配置 -->
	<!-- 加载配置文件 -->
	<context:property-placeholder location="classpath:jdbc.properties" />
	
	<!--<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="com.mysql.jdbc.Driver">
		</property>
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		&lt;!&ndash;连接池中保留的最小连接数。&ndash;&gt;
		<property name="minPoolSize" value="${cpool.minPoolSize}" />
		&lt;!&ndash;连接池中保留的最大连接数。Default: 15&ndash;&gt;
		<property name="maxPoolSize" value="${cpool.maxPoolSize}" />
		&lt;!&ndash;初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 5&ndash;&gt;
		<property name="initialPoolSize" value="${cpool.initialPoolSize}" />
		&lt;!&ndash;当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3&ndash;&gt;
		<property name="acquireIncrement" value="${cpool.acquireIncrement}" />
		&lt;!&ndash;最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0&ndash;&gt;
		<property name="maxIdleTime" value="${cpool.maxIdleTime}" />
		&lt;!&ndash;两次连接中间隔时间，单位毫秒。Default: 1000&ndash;&gt;
		<property name="acquireRetryDelay" value="${cpool.acquireRetryDelay}" />
		&lt;!&ndash;连接关闭时 是否将所有未提交的操作回滚&ndash;&gt;
		<property name="autoCommitOnClose" value="${cpool.autoCommitOnClose}"></property>
		&lt;!&ndash;获取连接的超时时间，默认无限等待&ndash;&gt;
		<property name="checkoutTimeout" value="${cpool.checkoutTimeout}"></property>
		&lt;!&ndash;当获取数据库连接失败后，重试的次数&ndash;&gt;
		<property name="acquireRetryAttempts" value="${cpool.acquireRetryAttempts}"></property>
		&lt;!&ndash;如果设为true那么在取得连接的同时将校验连接的有效性。Default: false&ndash;&gt;
		<property name="testConnectionOnCheckin" value="${cpool.testConnectionOnCheckin}" />
		&lt;!&ndash;定义所有连接测试都执行的测试语句。Default: null&ndash;&gt;
		<property name="preferredTestQuery" value="${cpool.preferredTestQuery}" />
		&lt;!&ndash;因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。&ndash;&gt;
		&lt;!&ndash;建议使用idleConnectionTestPeriod或automaticTestTable&ndash;&gt;
		&lt;!&ndash;等方法来提升连接测试的性能。Default: false&ndash;&gt;
		<property name="testConnectionOnCheckout" value="${cpool.testConnectionOnCheckout}" />
		&lt;!&ndash;每60秒检查所有连接池中的空闲连接。Default: 0&ndash;&gt;
		<property name="idleConnectionTestPeriod" value="${cpool.idleConnectionTestPeriod}" />
		&lt;!&ndash;c3p0将建一张名为Test的空表，并使用其自带的查询语句进行测试。如果定义了这个参数那么&ndash;&gt;
		&lt;!&ndash;属性preferredTestQuery将被忽略。你不能在这张Test表上进行任何操作，它将只供c3p0测试&ndash;&gt;
		&lt;!&ndash;使用。Default: null&ndash;&gt;
		<property name="automaticTestTable" value="${cpool.automaticTestTable}"></property>
	</bean>-->
	<bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"></bean>
	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
	   <property name="patterns">
	       <list>
	           <value>cn.com.czcb.service.*</value>
	           <value>cn.com.czcb.controller.*</value>
	           <value>cn.com.czcb.dao.*</value>
	       </list>
	   </property>
	</bean>
	
	<aop:config proxy-target-class="true">
	   <aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
	</aop:config>
	
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
	    <property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<property name="connectionProperties" value="config.decrypt=true;config.decrypt.key=${jdbc.publicKey}"></property>
		<property name="filters" value="config,stat,log4j"></property>
		<property name="maxActive" value="${cpool.maxPoolSize}"></property>
		<property name="initialSize" value="${cpool.initialPoolSize}"></property>
		<property name="maxWait" value="${cpool.checkoutTimeout}"></property>
		<property name="minIdle" value="${cpool.minPoolSize}"></property>
		<property name="timeBetweenEvictionRunsMillis" value="60000"></property>
		<property name="minEvictableIdleTimeMillis" value="300000"></property>
		<property name="validationQuery" value="${cpool.preferredTestQuery}"></property>
		<property name="testWhileIdle" value="true"></property>
		<property name="testOnBorrow" value="false"></property>
		<property name="testOnReturn" value="false"></property>
		<property name="poolPreparedStatements" value="true"></property>
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20"></property>
	</bean>
	<!-- mybatis配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis/mybatis.cfg.xml" />
		<property name="mapperLocations" value="classpath*:mybatis/mybatis-*.xml" />
		<!-- 扫描modal包，使用别名:cn.com.keydom.uker.model.entity to entity -->
		<property name="typeAliasesPackage" value="cn.com.czcb.model" />
	</bean>
	<!-- 扫描DAO接口包,动态实现DAO接口 -->
	<!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		&lt;!&ndash;<property name="sqlSessionFactory" ref="sqlSessionFactory"/> &ndash;&gt;
		<property name="basePackage" value="cn.com.keydom.uker.dao"></property>
		&lt;!&ndash; dataosource后处理的方式 &ndash;&gt;
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>-->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<!-- 注解事务 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager" />

</beans>